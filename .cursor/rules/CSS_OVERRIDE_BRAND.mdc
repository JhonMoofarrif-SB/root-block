---
alwaysApply: false
version: "2.1.0"
date: "2025-01-16"
---
# Root Block Design System - Brand Override CSS Standards

## üéØ Contexto

**Brand Overrides** permiten personalizar componentes del Design System para marcas espec√≠ficas sin modificar el c√≥digo base.

- **6 Marcas:** White Label, Jelpit, Davivienda, Cien Cuadras, Doctor Aki, Seguros Bol√≠var
- **Approach:** Data Attributes `[data-brand="nombre-marca"]`
- **Principio:** Solo sobreescribir las variables CSS que cambian, heredar todo lo dem√°s

---

## üìã PRINCIPIOS FUNDAMENTALES

### SIEMPRE Hacer:
- ‚úÖ **Usar `@layer brand-overrides`** para todos los overrides de variables CSS
- ‚úÖ Usar data attributes: `[data-brand="nombre-marca"]`
- ‚úÖ Solo definir variables CSS que cambien respecto al default
- ‚úÖ Mantener la misma estructura de variables que el componente base
- ‚úÖ Usar prefijo `--rb-` en todas las variables
- ‚úÖ Seguir el patr√≥n: `--rb-[component]-[variant]-[style]-[property]-[state]`
- ‚úÖ Usar tokens de la marca: `var(--rb-color-*)`
- ‚úÖ Documentar qu√© cambia y por qu√©

### NUNCA Hacer:
- ‚ùå **NO usar `!important`** (ya no es necesario con @layer brand-overrides)
- ‚ùå Repetir todo el CSS del componente base
- ‚ùå Cambiar clases CSS (solo variables)
- ‚ùå Crear nuevos selectores fuera del data attribute
- ‚ùå Hardcodear colores (usar tokens)
- ‚ùå Modificar la estructura HTML o clases
- ‚ùå Usar physical properties

---

## üèóÔ∏è TEMPLATE OBLIGATORIO - BRAND OVERRIDE

```css
/**
 * ============================================================================
 * [Nombre Marca] - [Component] Component Overrides
 * ============================================================================
 * 
 * Nueva Arquitectura con @layer brand-overrides (v2.0.0)
 * 
 * ESTRUCTURA:
 * 1. Configuraci√≥n global (fuera de @layer) - padding, border-radius, etc.
 * 2. Overrides por variante (dentro de @layer brand-overrides) - colores
 * 
 * ORDEN DE LAYERS (menor a mayor prioridad):
 * reset ‚Üí tokens ‚Üí base ‚Üí variants ‚Üí style-variants ‚Üí brand-overrides
 * ‚Üí sizes ‚Üí modifiers ‚Üí icon-positions ‚Üí states ‚Üí utilities
 * 
 * TIPOS: primary, secondary, tertiary, error
 * VARIANTES: stroke (default), fill, text
 * ESTADOS: default, hover, active, disabled, focus
 * 
 * ‚ö†Ô∏è IMPORTANTE:
 * - Usar @layer brand-overrides para overrides de variables CSS
 * - NO usar !important (ya no es necesario)
 * - Usar tokens de la marca: var(--rb-color-*), NO hardcodear
 * - Solo definir las variables que cambian respecto al default
 * ============================================================================
 */

/* ============================================================================
   1. CONFIGURACI√ìN GLOBAL (fuera de @layer)
   ============================================================================
   Propiedades estructurales como padding, border-radius, tama√±os
   ============================================================================ */
[data-brand='nombre-marca'] .rb-[component] {
  --rb-[component]-border-radius: 50px;
  --rb-[component]-padding-inline: 16px;
  --rb-[component]-padding-block: 8px;
  --rb-[component]-gap: 8px;
  --rb-[component]-min-block-size: 40px;
}

/* ============================================================================
   2. OVERRIDES POR VARIANTE (dentro de @layer brand-overrides)
   ============================================================================
   Variables de color, estados hover/active/disabled
   ============================================================================ */
@layer brand-overrides {
  /* PRIMARY - STROKE (default) */
  [data-brand='nombre-marca'] .rb-[component]--primary {
    /* Solo definir las variables que cambian */
    --rb-[component]-text-hover: var(--rb-color-primary-D100);
    --rb-[component]-text-active: var(--rb-color-primary-D100);
  }

  /* ========================================
     PRIMARY - FILL
     Descripci√≥n del estilo de la marca
     ======================================== */
  .rb-[component]--fill.rb-[component]--primary {
    /* Background */
    --rb-[component]-primary-fill-bg: var(--rb-color-secondary-base);
    --rb-[component]-primary-fill-bg-hover: var(--rb-color-secondary-D100);
    --rb-[component]-primary-fill-bg-active: var(--rb-color-secondary-D200);
    --rb-[component]-primary-fill-bg-disabled: var(--rb-color-grayscale-L300);

    /* Text */
    --rb-[component]-primary-fill-text: var(--rb-color-primary-D100);
    --rb-[component]-primary-fill-text-hover: var(--rb-color-primary-D100);
    --rb-[component]-primary-fill-text-active: var(--rb-color-primary-D100);
    --rb-[component]-primary-fill-text-disabled: var(--rb-color-grayscale-L100);

    /* Border */
    --rb-[component]-primary-fill-border: var(--rb-color-secondary-base);
    --rb-[component]-primary-fill-border-hover: var(--rb-color-secondary-D100);
    --rb-[component]-primary-fill-border-active: var(--rb-color-secondary-D200);
    --rb-[component]-primary-fill-border-disabled: var(--rb-color-grayscale-L300);
  }

  /* ========================================
     PRIMARY - TEXT
     Descripci√≥n del estilo de la marca
     ======================================== */
  .rb-[component]--text.rb-[component]--primary {
    /* Background */
    --rb-[component]-primary-text-bg: transparent;
    --rb-[component]-primary-text-bg-hover: var(--rb-color-secondary-L400);
    --rb-[component]-primary-text-bg-active: var(--rb-color-secondary-L300);
    --rb-[component]-primary-text-bg-disabled: transparent;

    /* Text */
    --rb-[component]-primary-text-text: var(--rb-color-primary-base);
    --rb-[component]-primary-text-text-hover: var(--rb-color-primary-D100);
    --rb-[component]-primary-text-text-active: var(--rb-color-primary-D200);
    --rb-[component]-primary-text-text-disabled: var(--rb-color-grayscale-base);
  }

  /* ========================================
     SECONDARY - STROKE
     Descripci√≥n del estilo de la marca
     ======================================== */
  .rb-[component]--secondary {
    /* Solo definir lo que cambia */
    --rb-[component]-secondary-stroke-bg: var(--rb-color-grayscale-white);
    --rb-[component]-secondary-stroke-bg-hover: var(--rb-color-primary-L400);

    --rb-[component]-secondary-stroke-text: var(--rb-color-primary-D100);
    --rb-[component]-secondary-stroke-text-hover: var(--rb-color-primary-D100);

    --rb-[component]-secondary-stroke-border: var(--rb-color-primary-base);
    --rb-[component]-secondary-stroke-border-hover: var(--rb-color-primary-D100);
  }

  /* ========================================
     SECONDARY - FILL
     Descripci√≥n del estilo de la marca
     ======================================== */
  .rb-[component]--fill.rb-[component]--secondary {
    --rb-[component]-secondary-fill-bg: var(--rb-color-primary-base);
    --rb-[component]-secondary-fill-bg-hover: var(--rb-color-primary-D100);

    --rb-[component]-secondary-fill-text: var(--rb-color-grayscale-white);

    --rb-[component]-secondary-fill-border: var(--rb-color-primary-base);
  }

  /* ========================================
     SECONDARY - TEXT
     Descripci√≥n del estilo de la marca
     ======================================== */
  .rb-[component]--text.rb-[component]--secondary {
    --rb-[component]-secondary-text-text: var(--rb-color-primary-base);
    --rb-[component]-secondary-text-text-hover: var(--rb-color-primary-D100);
  }

  /* ========================================
     TERTIARY - Si la marca lo personaliza
     ======================================== */
  .rb-[component]--tertiary {
    /* Solo si hay cambios respecto al default */
  }

  /* ========================================
     ERROR - Si la marca lo personaliza
     ======================================== */
  .rb-[component]--error {
    /* Solo si hay cambios respecto al default */
  }
}
```

---

## üìè PATR√ìN DE VARIABLES (OBLIGATORIO)

### Estructura de Nombres

```
--rb-[component]-[variant]-[style]-[property]-[state]
```

**Ejemplo completo:**
```css
--rb-button-primary-stroke-bg-hover
--rb-button-secondary-fill-text-active
--rb-button-tertiary-text-border-disabled
```

### Desglose:

| Parte | Valores Posibles | Descripci√≥n |
|-------|------------------|-------------|
| `component` | button, input, select, etc. | Nombre del componente |
| `variant` | primary, secondary, tertiary, error | Tipo de color/variante |
| `style` | stroke, fill, text | Variante de estilo |
| `property` | bg, text, border | Propiedad CSS que afecta |
| `state` | (default), hover, active, disabled | Estado interactivo |

---

## üé® ESTADOS COMPLETOS

**Siempre definir los 5 estados cuando se personaliza una propiedad (v2.1.0+):**

```css
/* ‚úÖ CORRECTO - Todos los estados incluyendo disabled-hover */
--rb-button-primary-stroke-bg: var(--rb-color-grayscale-white);
--rb-button-primary-stroke-bg-hover: var(--rb-color-secondary-L400);
--rb-button-primary-stroke-bg-active: var(--rb-color-secondary-L300);
--rb-button-primary-stroke-bg-disabled: var(--rb-color-grayscale-white);

/* ‚ùå INCORRECTO - Estados incompletos */
--rb-button-primary-stroke-bg: var(--rb-color-grayscale-white);
--rb-button-primary-stroke-bg-hover: var(--rb-color-secondary-L400);
/* Falta active y disabled */
```

---

## üé® NUEVO: DISABLED + HOVER (v2.1.0)

### ¬øQu√© es `disabled-hover`?
Permite mostrar **visual feedback** cuando el usuario pasa el mouse sobre un componente deshabilitado, mejorando la UX sin cambiar la funcionalidad.

### Variables Disponibles
```css
/* Para cada propiedad (bg, text, border), ahora hay 2 variables disabled: */
--rb-[component]-[variant]-[style]-bg-disabled        /* Sin hover */
--rb-[component]-[variant]-[style]-bg-disabled-hover  /* Con hover (NUEVO) */

--rb-[component]-[variant]-[style]-text-disabled
--rb-[component]-[variant]-[style]-text-disabled-hover

--rb-[component]-[variant]-[style]-border-disabled
--rb-[component]-[variant]-[style]-border-disabled-hover
```

### Fallback Autom√°tico
Si NO defines `-disabled-hover`, el sistema usa autom√°ticamente `-disabled`:
```css
/* Si solo defines esto: */
--rb-button-bg-disabled: var(--rb-color-grayscale-L300);

/* El hover usar√° el mismo valor autom√°ticamente */
/* NO necesitas definir --rb-button-bg-disabled-hover */
```

### Ejemplos por Variante

#### PRIMARY STROKE
```css
@layer brand-overrides {
  [data-brand='seguros-bolivar'] .rb-button--primary {
    /* DISABLED (sin hover) */
    --rb-button-bg-disabled: transparent;
    --rb-button-text-disabled: var(--rb-color-grayscale-base); /* #9B9B9B */
    --rb-button-border-disabled: var(--rb-color-grayscale-base);
    
    /* DISABLED + HOVER (aparece fondo gris) */
    --rb-button-bg-disabled-hover: var(--rb-color-grayscale-L200); /* #E1E1E1 */
    --rb-button-text-disabled-hover: var(--rb-color-grayscale-base); /* #9B9B9B mantiene */
    --rb-button-border-disabled-hover: var(--rb-color-grayscale-base);
  }
}
```

#### PRIMARY FILL
```css
@layer brand-overrides {
  [data-brand='seguros-bolivar'] .rb-button--primary.rb-button--fill {
    /* DISABLED (sin hover) */
    --rb-button-bg-disabled: var(--rb-color-grayscale-L300); /* #F5F5F5 */
    --rb-button-text-disabled: var(--rb-color-grayscale-base); /* #9B9B9B */
    --rb-button-border-disabled: var(--rb-color-grayscale-L300);
    
    /* DISABLED + HOVER (texto se aclara) */
    --rb-button-bg-disabled-hover: var(--rb-color-grayscale-L300); /* #F5F5F5 mantiene */
    --rb-button-text-disabled-hover: var(--rb-color-grayscale-L100); /* #B9B9B9 m√°s claro */
    --rb-button-border-disabled-hover: var(--rb-color-grayscale-L300);
  }
}
```

#### PRIMARY TEXT
```css
@layer brand-overrides {
  [data-brand='seguros-bolivar'] .rb-button--primary.rb-button--text {
    /* DISABLED (sin hover) */
    --rb-button-bg-disabled: transparent;
    --rb-button-text-disabled: var(--rb-color-grayscale-base); /* #9B9B9B */
    
    /* DISABLED + HOVER (aparece fondo gris) */
    --rb-button-bg-disabled-hover: var(--rb-color-grayscale-L300); /* #F5F5F5 aparece */
    --rb-button-text-disabled-hover: var(--rb-color-grayscale-base); /* #9B9B9B mantiene */
  }
}
```

### Patrones Comunes de Feedback Visual

| Variante | Estrategia Disabled + Hover | Feedback Visual |
|----------|----------------------------|-----------------|
| **STROKE** | Aparece fondo gris (`transparent` ‚Üí `#E1E1E1`) | ‚ú® Fondo aparece |
| **FILL** | Texto se aclara (`#9B9B9B` ‚Üí `#B9B9B9`) | ‚ú® Texto m√°s claro |
| **TEXT** | Aparece fondo gris (`transparent` ‚Üí `#F5F5F5`) | ‚ú® Fondo aparece |

### Tokens Recomendados

| Token | Hex | Uso Recomendado |
|-------|-----|-----------------|
| `--rb-color-grayscale-base` | `#9B9B9B` | Texto/icono disabled (oscuro) |
| `--rb-color-grayscale-L100` | `#B9B9B9` | Texto/icono disabled hover (m√°s claro) |
| `--rb-color-grayscale-L200` | `#E1E1E1` | Fondo disabled hover (STROKE) |
| `--rb-color-grayscale-L300` | `#F5F5F5` | Fondo disabled (FILL) |

### Beneficios
‚úÖ **UX mejorada:** Usuario sabe que el componente detecta hover pero est√° deshabilitado  
‚úÖ **Flexible:** Cada marca personaliza su feedback visual  
‚úÖ **Fallback autom√°tico:** Sin `-disabled-hover`, usa `-disabled`  
‚úÖ **Consistente:** Mismo patr√≥n para todos los componentes  
‚úÖ **Backward compatible:** No rompe implementaciones existentes  

---

## üéØ SELECTORES ESPEC√çFICOS POR STYLE-VARIANT

### STROKE (default)
```css
.rb-button--primary {
  /* Solo clase variant, sin --stroke ni --fill ni --text */
  --rb-button-primary-stroke-bg: var(--rb-color-grayscale-white);
}
```

### FILL
```css
.rb-button--fill.rb-button--primary {
  /* Doble clase: --fill + --primary */
  --rb-button-primary-fill-bg: var(--rb-color-secondary-base);
}
```

### TEXT
```css
.rb-button--text.rb-button--primary {
  /* Doble clase: --text + --primary */
  --rb-button-primary-text-text: var(--rb-color-primary-base);
}
```

---

## üìä PROPIEDADES POR STYLE-VARIANT

### STROKE (outline con borde)
```css
/* Background - usualmente white o transparente */
--rb-button-[variant]-stroke-bg: var(--rb-color-grayscale-white);
--rb-button-[variant]-stroke-bg-hover: var(--rb-color-secondary-L400);
--rb-button-[variant]-stroke-bg-active: var(--rb-color-secondary-L300);
--rb-button-[variant]-stroke-bg-disabled: var(--rb-color-grayscale-white);

/* Text - color del brand */
--rb-button-[variant]-stroke-text: var(--rb-color-primary-D100);
--rb-button-[variant]-stroke-text-hover: var(--rb-color-secondary-D100);
--rb-button-[variant]-stroke-text-active: var(--rb-color-secondary-D200);
--rb-button-[variant]-stroke-text-disabled: var(--rb-color-grayscale-base);

/* Border - visible y del color del brand */
--rb-button-[variant]-stroke-border: var(--rb-color-secondary-base);
--rb-button-[variant]-stroke-border-hover: var(--rb-color-secondary-D100);
--rb-button-[variant]-stroke-border-active: var(--rb-color-secondary-D200);
--rb-button-[variant]-stroke-border-disabled: var(--rb-color-grayscale-base);
```

### FILL (s√≥lido con fondo)
```css
/* Background - color s√≥lido del brand */
--rb-button-[variant]-fill-bg: var(--rb-color-secondary-base);
--rb-button-[variant]-fill-bg-hover: var(--rb-color-secondary-D100);
--rb-button-[variant]-fill-bg-active: var(--rb-color-secondary-D200);
--rb-button-[variant]-fill-bg-disabled: var(--rb-color-grayscale-L300);

/* Text - contraste con el fondo */
--rb-button-[variant]-fill-text: var(--rb-color-primary-D100);
--rb-button-[variant]-fill-text-hover: var(--rb-color-primary-D100);
--rb-button-[variant]-fill-text-active: var(--rb-color-primary-D100);
--rb-button-[variant]-fill-text-disabled: var(--rb-color-grayscale-L100);

/* Border - mismo color que el fondo */
--rb-button-[variant]-fill-border: var(--rb-color-secondary-base);
--rb-button-[variant]-fill-border-hover: var(--rb-color-secondary-D100);
--rb-button-[variant]-fill-border-active: var(--rb-color-secondary-D200);
--rb-button-[variant]-fill-border-disabled: var(--rb-color-grayscale-L300);
```

### TEXT (sin fondo ni borde)
```css
/* Background - siempre transparente */
--rb-button-[variant]-text-bg: transparent;
--rb-button-[variant]-text-bg-hover: transparent;
--rb-button-[variant]-text-bg-active: transparent;
--rb-button-[variant]-text-bg-disabled: transparent;

/* Text - color del brand */
--rb-button-[variant]-text-text: var(--rb-color-primary-base);
--rb-button-[variant]-text-text-hover: var(--rb-color-primary-D100);
--rb-button-[variant]-text-text-active: var(--rb-color-primary-D200);
--rb-button-[variant]-text-text-disabled: var(--rb-color-grayscale-base);

/* Border - transparente (NO se define, se hereda del base) */
```

---

## üé® ESTRATEGIA DE PERSONALIZACI√ìN

### Nivel 1: Solo cambiar lo esencial
```css
/* Si solo cambias colores primary/secondary STROKE */
[data-brand='mi-marca'] {
  .rb-button--primary {
    --rb-button-primary-stroke-border: var(--rb-color-secondary-base);
    --rb-button-primary-stroke-text: var(--rb-color-primary-D100);
  }
}
```

### Nivel 2: Personalizaci√≥n completa de una variante
```css
/* Todos los estados de primary STROKE */
[data-brand='mi-marca'] {
  .rb-button--primary {
    /* Los 4 estados de cada propiedad */
    --rb-button-primary-stroke-bg: ...;
    --rb-button-primary-stroke-bg-hover: ...;
    --rb-button-primary-stroke-bg-active: ...;
    --rb-button-primary-stroke-bg-disabled: ...;
  }
}
```

### Nivel 3: Personalizaci√≥n de todos los style-variants
```css
/* STROKE + FILL + TEXT */
[data-brand='mi-marca'] {
  /* STROKE */
  .rb-button--primary { ... }
  
  /* FILL */
  .rb-button--fill.rb-button--primary { ... }
  
  /* TEXT */
  .rb-button--text.rb-button--primary { ... }
}
```

---

## üìÇ ESTRUCTURA DE ARCHIVOS

```
packages/brand-overrides/src/
‚îú‚îÄ‚îÄ white-label/
‚îÇ   ‚îú‚îÄ‚îÄ button.css          ‚Üê Overrides de bot√≥n
‚îÇ   ‚îî‚îÄ‚îÄ index.css           ‚Üê @import 'button.css';
‚îÇ
‚îú‚îÄ‚îÄ davivienda/
‚îÇ   ‚îú‚îÄ‚îÄ button.css
‚îÇ   ‚îî‚îÄ‚îÄ index.css
‚îÇ
‚îú‚îÄ‚îÄ cien-cuadras/
‚îÇ   ‚îú‚îÄ‚îÄ button.css
‚îÇ   ‚îî‚îÄ‚îÄ index.css
‚îÇ
‚îú‚îÄ‚îÄ doctor-aki/
‚îÇ   ‚îú‚îÄ‚îÄ button.css
‚îÇ   ‚îî‚îÄ‚îÄ index.css
‚îÇ
‚îú‚îÄ‚îÄ jelpit/
‚îÇ   ‚îú‚îÄ‚îÄ button.css
‚îÇ   ‚îî‚îÄ‚îÄ index.css
‚îÇ
‚îú‚îÄ‚îÄ seguros-bolivar/
‚îÇ   ‚îú‚îÄ‚îÄ button.css
‚îÇ   ‚îî‚îÄ‚îÄ index.css
‚îÇ
‚îî‚îÄ‚îÄ index.css               ‚Üê @import de todas las marcas
```

---

## üöÄ USO EN HTML

```html
<!-- Aplicar brand mediante data-brand -->
<div data-brand="seguros-bolivar">
  <!-- Todos los componentes dentro heredan el override -->
  <button class="rb-button rb-button--primary">
    Primary Stroke (override Seguros Bol√≠var)
  </button>
  
  <button class="rb-button rb-button--primary rb-button--fill">
    Primary Fill (override Seguros Bol√≠var)
  </button>
</div>

<!-- Sin data-brand, usa el default -->
<button class="rb-button rb-button--primary">
  Primary Stroke (default - White Label)
</button>
```

---

## ‚úÖ CHECKLIST BRAND OVERRIDE

- [ ] ‚úÖ Usa `[data-brand="nombre-marca"]` como wrapper
- [ ] ‚úÖ Solo define variables CSS que cambian
- [ ] ‚úÖ Mantiene la estructura de nombres del componente base
- [ ] ‚úÖ Define los 4 estados (default, hover, active, disabled) cuando cambia una propiedad
- [ ] ‚úÖ Usa selectores correctos: `.rb-button--primary` (stroke), `.rb-button--fill.rb-button--primary` (fill)
- [ ] ‚úÖ Documenta qu√© cambia y por qu√© en comentarios
- [ ] ‚úÖ Variables usan prefijo `--rb-`
- [ ] ‚úÖ Usa tokens de color del sistema: `var(--rb-color-*)`
- [ ] ‚úÖ No repite c√≥digo del componente base
- [ ] ‚úÖ No usa `!important`
- [ ] ‚úÖ No modifica clases ni estructura HTML

---

## üéØ EJEMPLOS COMPLETOS

### Ejemplo 1: Override M√≠nimo
```css
/**
 * Davivienda - Solo cambia primary stroke
 */
[data-brand='davivienda'] {
  .rb-button--primary {
    --rb-button-primary-stroke-border: var(--rb-color-primary-base);
    --rb-button-primary-stroke-text: var(--rb-color-primary-D100);
  }
}
```

### Ejemplo 2: Override Completo (Seguros Bol√≠var)
```css
/**
 * Seguros Bol√≠var - Personalizaci√≥n completa de primary
 */
[data-brand='seguros-bolivar'] {
  /* PRIMARY - STROKE */
  .rb-button--primary {
    --rb-button-primary-stroke-bg: var(--rb-color-grayscale-white);
    --rb-button-primary-stroke-bg-hover: var(--rb-color-secondary-L400);
    --rb-button-primary-stroke-bg-active: var(--rb-color-secondary-L300);
    --rb-button-primary-stroke-bg-disabled: var(--rb-color-grayscale-white);

    --rb-button-primary-stroke-text: var(--rb-color-primary-D100);
    --rb-button-primary-stroke-text-hover: var(--rb-color-secondary-D100);
    --rb-button-primary-stroke-text-active: var(--rb-color-secondary-D200);
    --rb-button-primary-stroke-text-disabled: var(--rb-color-grayscale-base);

    --rb-button-primary-stroke-border: var(--rb-color-secondary-base);
    --rb-button-primary-stroke-border-hover: var(--rb-color-secondary-D100);
    --rb-button-primary-stroke-border-active: var(--rb-color-secondary-D200);
    --rb-button-primary-stroke-border-disabled: var(--rb-color-grayscale-base);
  }

  /* PRIMARY - FILL */
  .rb-button--fill.rb-button--primary {
    --rb-button-primary-fill-bg: var(--rb-color-secondary-base);
    --rb-button-primary-fill-bg-hover: var(--rb-color-secondary-D100);
    --rb-button-primary-fill-bg-active: var(--rb-color-secondary-D200);
    --rb-button-primary-fill-bg-disabled: var(--rb-color-grayscale-L300);

    --rb-button-primary-fill-text: var(--rb-color-primary-D100);
    --rb-button-primary-fill-text-hover: var(--rb-color-primary-D100);
    --rb-button-primary-fill-text-active: var(--rb-color-primary-D100);
    --rb-button-primary-fill-text-disabled: var(--rb-color-grayscale-L100);

    --rb-button-primary-fill-border: var(--rb-color-secondary-base);
    --rb-button-primary-fill-border-hover: var(--rb-color-secondary-D100);
    --rb-button-primary-fill-border-active: var(--rb-color-secondary-D200);
    --rb-button-primary-fill-border-disabled: var(--rb-color-grayscale-L300);
  }

  /* PRIMARY - TEXT */
  .rb-button--text.rb-button--primary {
    --rb-button-primary-text-bg: transparent;
    --rb-button-primary-text-bg-hover: var(--rb-color-secondary-L400);
    --rb-button-primary-text-bg-active: var(--rb-color-secondary-L300);
    --rb-button-primary-text-bg-disabled: transparent;

    --rb-button-primary-text-text: var(--rb-color-primary-base);
    --rb-button-primary-text-text-hover: var(--rb-color-primary-D100);
    --rb-button-primary-text-text-active: var(--rb-color-primary-D200);
    --rb-button-primary-text-text-disabled: var(--rb-color-grayscale-base);
  }
}
```

---

## üîß DEBUGGING

### Verificar que el override est√° aplicado

```css
/* En DevTools, buscar las variables computadas */
[data-brand='mi-marca'] .rb-button--primary {
  /* Debe mostrar los valores override, no los default */
}
```

### Especificidad correcta

```
[data-brand='mi-marca'] .rb-button--primary
‚Üì especificidad: (0, 2, 0)

.rb-button--primary
‚Üì especificidad: (0, 1, 0)

‚úÖ El override gana por mayor especificidad
```

---

## üéØ RECORDATORIOS FINALES

1. **SOLO variables CSS** - No cambies clases ni estructura
2. **Data attribute obligatorio** - `[data-brand="nombre"]`
3. **Hereda todo lo dem√°s** - Solo define lo que cambia
4. **4 estados siempre** - default, hover, active, disabled
5. **Selectores espec√≠ficos** - `.rb-button--fill.rb-button--primary` para FILL
6. **Usa tokens del sistema** - `var(--rb-color-*)`
7. **Documenta los cambios** - Comentarios claros sobre qu√© y por qu√©
8. **No uses !important** - La especificidad es suficiente
9. **Mant√©n la consistencia** - Sigue el patr√≥n del componente base
10. **Prueba todos los estados** - Verifica hover, active, disabled

---

## üí¨ EJEMPLOS DE PROMPTS PARA IA

### üéØ **PROMPT 1: Crear Brand Override desde cero**

```
@CSS_OVERRIDE_BRAND.mdc 

Necesito crear el brand override para [MARCA] del componente button.

Requisitos:
- El bot√≥n Primary Stroke debe tener texto [COLOR] en todos los estados (hover, active, focus)
- El bot√≥n Primary Fill debe tener fondo [COLOR] y texto [COLOR]
- El bot√≥n Secondary debe usar colores [COLOR] en lugar de los defaults
- Border radius: [VALOR]px
- Padding: [VALOR]px vertical, [VALOR]px horizontal
- Altura m√≠nima: [VALOR]px

Por favor:
1. Revisa los tokens de @[marca].json para identificar los colores correctos
2. Crea el archivo en packages/brand-overrides/src/[marca]/button.css
3. Usa @layer brand-overrides para los overrides de variables
4. Documenta cada cambio con comentarios claros
5. Reconstruye el bundle y verifica en el navegador
```

### üîß **PROMPT 2: Modificar Brand Override existente**

```
@CSS_OVERRIDE_BRAND.mdc @button.css 

Necesito modificar el brand override de Seguros Bol√≠var.

Cambios requeridos:
- El bot√≥n Primary TEXT debe tener fondo crema (#FFFCF0) en hover
- El bot√≥n Primary TEXT debe tener fondo crema claro (#FFF6D4) en pressed
- El texto debe permanecer verde (#038450) en todos los estados

Por favor:
1. Modifica @seguros-bolivar/button.css 
2. Usa @layer brand-overrides para los cambios
3. Aseg√∫rate de que el texto permanezca verde incluso en hover/pressed
4. Reconstruye el bundle y verifica que funcione
```

### üêõ **PROMPT 3: Debugging de Brand Override**

```
@CSS_OVERRIDE_BRAND.mdc @button.css @seguros-bolivar/button.css 

El bot√≥n Primary Stroke de Seguros Bol√≠var est√° cambiando a color amarillo en hover, 
pero deber√≠a permanecer verde (#038450).

Por favor:
1. Analiza el flujo de compilaci√≥n desde @button.css hasta el bundle final
2. Verifica que @layer brand-overrides tenga la prioridad correcta
3. Revisa si las variables CSS se est√°n aplicando correctamente
4. Prop√≥n una soluci√≥n y explica por qu√© funcionar√°
5. Implementa la soluci√≥n y verifica en el navegador
```

### üìä **PROMPT 4: Completar todas las variantes de una marca**

```
@CSS_OVERRIDE_BRAND.mdc @button.css @seguros-bolivar/button.css 

Necesito completar TODAS las variantes de botones para Seguros Bol√≠var:

PRIMARY:
- STROKE (‚úÖ ya existe)
- FILL (pendiente)
- TEXT (‚úÖ ya existe)

SECONDARY:
- STROKE (‚úÖ ya existe)
- FILL (‚úÖ ya existe)
- TEXT (‚úÖ ya existe)

TERTIARY:
- STROKE (pendiente)
- FILL (pendiente)  
- TEXT (pendiente)

ERROR:
- STROKE (pendiente)
- FILL (pendiente)
- TEXT (pendiente)

Por favor:
1. Revisa @seguros-bolivar.json para los tokens de colores
2. Implementa las variantes faltantes usando @layer brand-overrides
3. Mant√©n la consistencia con las variantes existentes
4. Documenta cada nueva variante
5. Reconstruye y verifica todas las variantes
```

### üé® **PROMPT 5: Migrar marca existente a nueva arquitectura**

```
@CSS_OVERRIDE_BRAND.mdc @button.css @jelpit/button.css 

Necesito migrar el brand override de Jelpit a la nueva arquitectura con @layer brand-overrides.

Por favor:
1. Lee el override actual de @jelpit/button.css
2. Identifica qu√© variables CSS est√°n siendo sobrescritas
3. Reescribe el archivo usando @layer brand-overrides
4. Elimina cualquier c√≥digo redundante
5. Mant√©n solo los cambios espec√≠ficos de la marca
6. Reconstruye el bundle y verifica que todo funcione igual
```

### üîç **PROMPT 6: Verificar consistencia entre marcas**

```
@CSS_OVERRIDE_BRAND.mdc 

Por favor, analiza todos los brand overrides de botones y verifica:

1. ¬øTodas las marcas usan @layer brand-overrides?
2. ¬øHay c√≥digo duplicado innecesario?
3. ¬øTodas usan tokens de su marca (no hardcodean colores)?
4. ¬øLa estructura es consistente entre todas las marcas?
5. ¬øFalta alguna variante importante?

Genera un reporte con:
- Estado actual de cada marca (completo/incompleto)
- Problemas detectados
- Sugerencias de mejora
- Plan de acci√≥n para estandarizar todo
```

---

## üìö REFERENCIAS

- Componente base: `packages/atoms/src/button.css`
- Ejemplo completo: `packages/brand-overrides/src/seguros-bolivar/button.css`
- Tokens de marca: `packages/tokens/src/primitives/brands/[marca].json`
- Arquitectura CSS: `.cursor/rules/CSS.mdc`

---

## üéì TIPS PARA PROMPTS EFECTIVOS

### ‚úÖ **Buen Prompt**
```
@CSS_OVERRIDE_BRAND.mdc @button.css 

Crear override para Davivienda:
- Primary Stroke: texto rojo en hover/active
- Tokens: usar @davivienda.json
- Usar @layer brand-overrides
```

### ‚ùå **Mal Prompt**
```
Cambia el bot√≥n de Davivienda a rojo
```

**¬øPor qu√© es mejor el primero?**
- ‚úÖ Referencia la regla CSS correcta
- ‚úÖ Especifica qu√© componente y variante
- ‚úÖ Indica usar tokens (no hardcodear)
- ‚úÖ Menciona la arquitectura correcta (@layer)

---

**√öltima actualizaci√≥n:** 2025-01-16  
**Versi√≥n:** 2.0.0 - Brand Override Standards con @layer brand-overrides
